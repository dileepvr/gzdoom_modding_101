#+TITLE: Getting Started with GZDoom Modding
#+SUBTITLE: A guide for absolute beginners
#+OPTIONS: author:nil toc:2 html5-fancy:t
#+HTML_DOCTYPE: html5
#+BIND: org-tufte-embed-images:nil

If you are reading this on the github repo, try [[https://dileepvr.github.io/gzdoom_modding_101][this link]] for some
=HTML= styling. Then use the floating element labeled "/Table of
Contents/" to the top-right of this page to navigate between
sections. Click on the "Switch Color Mode" text at the top-left of the
page to switch between /light/ and /dark/ modes.

This guide will introduce the basics of modding for the GZDoom source
port.  It is aimed at beginners with little-to-no technical
knowledge. For more advanced help, check the [[https://zdoom.org/wiki/Tutorials][Tutorials page]] on the
zdoom wiki, or Jekyll Grim's [[https://jekyllgrim.github.io/ZScript_Basics/][Zscript basics]]. The guide will focus on
GZDoom, but might have limited applicability to other source ports. It
is structured as a sequence of exercises that the reader is expected
to follow along by actually implementing the instructions on their
computer. It presents particular ways of doing things in particular
chapters for pedagogical reasons and to inculcate good habits. It will
not present the full context or historical information for everything,
because it is meant to be a first-pass curriculum, where too much
extraneous information can be overwhelming and counter-productive. You
can recommend additions/changes to this guide by submitting PRs to the
[[https://github.com/dileepvr/gzdoom_modding_101][github repo]]. Please only make changes to the =index.org= file. Do not
edit the =html= file directly.

* Running GZDoom and understanding WADs

** Getting the Engine

First, let us get GZDoom running and playing a game. Download the
latest version of GZDoom (and not ZDoom) for your operating system
from here: [[https://zdoom.org/downloads][https://zdoom.org/downloads]]

If you are running on Linux, you might be better off [[https://zdoom.org/wiki/Compile_GZDoom_on_Linux][compiling it from
source]]. That is not a ding. I do this myself.


After downloading and unpacking, you should end up with a folder
somewhere on your computer with files named:
- =gzdoom.exe= (or just =gzdoom=)
- =gzdoom.pk3=
- =lights.pk3=
- =brightmaps.pk3=
- =game_support.pk3=
- =game_widescreen_gfx.pk3=
- =fm_banks= (folder)
- =soundfonts= (folder)

Depending on the OS you downloaded for, you might have some extra
files like =*.dll= files. If you try to run the executable file
(=gzdoom.exe=) by either double-clicking on it, or running the command
from a terminal/command-prompt from that folder location, it should
throw up a message saying that it couldn't find any IWADs.

To run as a command, open a terminal (Linux) or command prompt
(Windows), and navigate to the directory location using the
change-directory (=cd=) command. When there, list the files using the
=ls= (Linux) or =dir= (Windows) command. It should print out all the
files from the above list. Then from there, just type =./gzdoom=
(Linux) or =gzdoom.exe= (Windows). This has the same effect as
double-clicking the file from your graphical file browser. Keep the
terminal/command-prompt open (minimize it for now). We won't be using
the command method everytime but it helps understand what is happening
under the hood.

** Getting some IWADs

Running the engine executable by itself couldn't run a game because
you haven't downloaded any actual games for the engine to run. Let us
fix that. For this guide, we will be using Freedoom, but you could
follow the same steps with Doom 1 and Doom 2 if you have purchased
those wad files from you favorite legal videogame store.

Acquire the files =freedoom1.wad= and =freedoom2.wad= from
[[https://freedoom.github.io/download.html][https://freedoom.github.io/download.html]] (click on the =Freedoom:
Phase 1+2= hyperlink). Or better yet, get version 0.13.0 specifically
[[https://github.com/freedoom/freedoom/releases/tag/v0.13.0][from here]], since that is the one this guide will be using. Extract
these two =*.wad= files from the zip archive and place them in the
same directory as your GZDoom executable. If you are having trouble
opening a zip archive file, double-click or right-click on it and
"extract" the contents. On the Linux terminal, a tool like =unzip= can
also be used. With the files placed at the same location as your
GZDoom executable, running GZDoom again should cause the program to
auto-detect =freedoom1.wad= and =freedoom2.wad= and list them for
selection on startup.

Let's run Freedoom2 from the command line. From the
terminal/command-prompt, run the following command:

- Windows
#+BEGIN_SRC
gzdoom.exe -iwad freedoom2.wad
#+END_SRC
- Linux
#+BEGIN_SRC
./gzdoom -iwad freedoom2.wad
#+END_SRC

The game should launch, and you should be greeted with these starting
screens of main menu, and the first level:

#+CAPTION: Main menu screen for Freedoom 2 (v0.13.0)
#+ATTR_HTML: :width 800px
[[./images/screenshot01.jpg]]

#+CAPTION: Starting area of MAP01 in Freedoom 2 (v0.13.0)
#+ATTR_HTML: :width 800px
[[./images/screenshot02.jpg]]

These screenshots are from running version 0.13.0 of
=freedoom2.wad=. Another version might look slightly different.

The files =freedoom.wad= and =freedoom2.wad= are called IWADs, which
is short for [[https://zdoom.org/wiki/IWAD][internal WADs]]. These are wad-files that have all the
information within them for the engine to run a whole game. Later on,
we will take a look into what is actually inside them by using another
program.

* Basic replacement mods

** Texture replacement

Now we are going to make our first mod. Create a project folder
somewhere on your computer. Call it something like
"=my_first_mod=". Inside of it, create a folder named
"=textures=". The name of this folder is important. It has to be spelt
exactly and cannot be arbitrary. Now, right click the following image
file and save it inside the "=textures=" folder. Make sure that it is
named =AQRUST08.png=. The filename is important.

#+CAPTION: =AQRUST08.png= modified wall texture
[[./images/AQRUST08.png]]

Now, zip the =textures= folder into a zip-archive file called
something like =my_first_mod.zip=. The filename of this zip archive is
not important and can be anything of your choosing. You can
right-click the folder and compress it into a zip file. On Linux, you
can run this command from the location of your project folder:

#+BEGIN_SRC
  zip -r my_first_mod.zip textures/
#+END_SRC

This uses the =zip= program with the =-r= recursive flag to make sure
that contents of subfolders end up inside the zip
file. Congratulations. As far is the current version of GZDoom (4.14.0
as of this writing) is concerned, you just made your first mod. Now
let's run it. You can do this either by dragging and dropping the zip
file onto your =gzdoom.exe= executable file, and selecting the
=freedoom2.wad= IWAD when it asks, or running the command:

#+BEGIN_SRC
  ./gzdoom -iwad freedoom2.wad -file <PATH-TO-PROJECT-FOLDER>/my_first_mod.zip
#+END_SRC

Once you launch the game, you should be greeted to this view:

#+CAPTION: Opening area of MAP01 in Freedoom 2 (v0.13.0) with a texture replaced
#+ATTR_HTML: :width 800px
[[./images/screenshot03.jpg]]

*** Analysis

Let us unpack what is happening here. You ran GZDoom with two files:
=freedoom2.wad= and =my_first_mod.zip=. The first one is the IWAD,
meaning the file that contains the base game. The second one is what
is called a PWAD (short for [[https://zdoom.org/wiki/PWAD][patch WAD]]). The IWAD contained a texture
lump (will explain later) named =AQRUST08=, and a map lump (among
others) named =MAP01=, and instructions inside the map lump for the
engine to paint that texture on a specific bunch of walls (with some
offsets, lighting effects, etc.). This is what happens when you run
GZDoom with just the IWAD =freedoom2.wad= by itself. But when you run
the IWAD with this PWAD, which contains its own copy of the =AQRUST08=
texture (we'll get into how I knew that later), the engine replaces
all instances of that texture with the one from your PWAD. *This is
also why it was important to name the file exactly right.* If you load
two PWADs that both replace the same texture like so:

#+BEGIN_SRC
  ./gzdoom -iwad freedoom2.wad -file mod1.pk3 -file mod2.pk3
#+END_SRC

then the replacement texture from the last PWAD (=mod2.pk3=) will be
used. Think of it like the replacement instructions are executed
serially, in the sequence of the files.

*** Get setup with a Launcher before proceeding further

This is one reason I illustrated the command line method of launching
GZDoom. Selecting multiple mod files and dragging-and-dropping them
onto the GZDoom executable does not give you control over the mod load
order. People routinely play games on GZDoom with 5-15 mods loaded at
once, often in a specific order. Don't worry. No one is actually
typing out long commands. They are using launcher programs like [[https://zdoom.org/wiki/ZDL][ZDL]] or
[[https://github.com/Youda008/DoomRunner/releases/][DoomRunner]]. I myself am partial to DoomRunner. Pick one and stick to
it.

Most launcher programs allow saving of presets for various mod and
order combinations. On first launch, they typically ask you to select
engine executables, a list of IWADs, and the usual location for
various kinds of PWADs like map packs. So you don't have to put files
in your GZDoom folder, or any other specific location. You should feel
free to organize your files on your computer any way you see fit. Here
is a view of my DoomRunner front page:

#+ATTR_HTML: :width 800px
[[./images/doomrunner01.jpg]]

As you can see, I have highlighted a preset that I have named
"=Elementalism=" that is using the GZDoom executable, the =doom2.wad=
IWAD file, and a whole bunch of PWADs in a particular
order. [[https://www.moddb.com/mods/elementalism][=Elementalism=]] is an ambitious map pack, and [[https://xxheavy-swagxx.itch.io/hellrider-vengeful][=Hellrider
Vengeful=]] is a weapons and player-movement mod. Here, I am adding a
mod called [[https://forum.zdoom.org/viewtopic.php?t=75585][=Flashlight++=]] even though =Hellrider= already comes with a
flashlight, because the maps in =Elementalism= have all been
programmed to strip the player of all inventory items and pistol-start
every level. And the flashlight in =Flashlight++= happens to be
unclearable using that method. If I were to try and and another mod
that modifies weapons, like [[https://github.com/jekyllgrim/Beautiful-Doom/releases][=Beautiful Doom=]] to this list, then the
conflict with =Hellrider= will cause all weapons to be replaced by one
mod and ammunition pickups be of the other. So not all mods are
designed to go together. I mostly ignore DoomRunner's separate map
pack subwindow and load map-pack mods as regular mods, with full
control over load order.

For the rest of this guide, I recommend picking a launcher program and
launching GZDoom with =my_first_mod.zip= and =freedoom2.wad= just to
develop good habits. Under the hood, all these Lauchers are just
constructing and executing lengthy commands like the ones above.

#+ATTR_HTML: :width 800px
[[./images/doomrunner02.jpg]]

And yes, you can rename your mod =my_first_mod.pk3= if you want. The
file extension doesn't matter, and only exists to help you. Modern
GZDoom PWADs are named =*.pk3= and IWADs are named =*.ipk3= (we'll get
there). You might recall that the engine's internal files that came
with the GZDoom download (=lights.pk3=, =brightmaps.pk3=,
=game_support.pk3=, etc.) are also =*.pk3= files. These are the only
ones that should not be moved out of the GZDoom executable's folder.

Older mods, and mods made to be interoperable with source ports other
than GZDoom aren't zip files, but are instead of the WAD format. While
GZDoom can read WAD files (the IWAD freedoom2.wad is a WAD file, after
all), the best practice is to make mods as =*.pk3= files (which are
secretly zip files). Only levels/maps need to be in the old WAD
format. More on that later.

** Text files as lumps

Let us continue adding to your mod. So far, you have a zip file
(possibly renamed "=my_first_mod.pk3=") which contains a folder named
=textures=, which in-turn contains a =png= image file named
=AQRUST08.png=. It was important for this file to be a =png= file. And
it is very important that both the folder and file names are what they
are for the mod to work. The filename had to be =AQRUST08= because
that tells the engine what texture it is meant to replace. The folder
name =textures= is a reserved name. The engine (and most map editors)
interpretes it as a location for texture files. You can put any =png=
images in them, and even organize them into subfolders within. But you
cannot put other arbitrary data in it and expect it to work. Nor can
you just put the =AQRUST08.png= file alone in a zip archive and expect
the replacement to work.

There are other reserved names, as far as files and folders in the
root (top) location of the zip archive is concerned. These reserved
names can have any capitalization. They can be camelcase, all upper
case, or lower case. It is all the same to the engine. Reserved names
for folders include "=textures=", "=flats=", "=sprites=", "=maps=",
etc. A [[https://zdoom.org/wiki/Using_ZIPs_as_WAD_replacement#How_to][full list]] is on the wiki. You can have other folders and
subfolders, but these and their contents are treated by the engine in
a special way. Reserved names for files include [[https://zdoom.org/wiki/TEXTURES][=TEXTURES=]], [[https://zdoom.org/wiki/ZScript#Load_order][=ZSCRIPT=]],
[[https://zdoom.org/wiki/MAPINFO][=MAPINFO=]], [[https://zdoom.org/wiki/GLDEFS][=GLDEFS=]], etc. Again, the capitalization doesn't matter,
and you can give them any file extensions you want (=*.lmp=, =*.txt=,
=*.zsc=). You can store other files in the root location of your mod
(like a lincense file, a readme, or a credits file if you end up using
other people's work), but they cannot use these reserved names.

Files in =*.pk3= archives may be referred to as lumps as a holdover
from the wad-format days. The wad-format is also a sort of archive
format like =zip=. Contiguous sequence of bits inside a wad-file
(often marked with a =start= and =end= markers) represent specific
types of data. We can explore this later, but we don't have to worry
about that as long as we have subfolders and reserved names. These
special lumps are often just text files that have their own format for
presenting data to the engine. Let us try and use one to get a better
feel.

For this next exercise, we will replace the texture on the door
visible from the starting area in Freedoom 2. The lump name for this
texture needs to be =BIGDOOR1= (again, I'll get to how I know this
later). But we will not just be using a file named =BIGDOOR1.png= in
the =textures= folder, even though that will work. We will instead use
use some other file name, and try to use the =TEXTURES= lump to make
it work.

Pick any =png= image file you want. I'm going with [[https://en.wikipedia.org/wiki/John_Romero][John Romero's]]
forehead. Crop/scale the image using some image manipulation program
like GIMP, Photoshop, or even MSPaint, to fit into 128 $\times$ 96 pixels to
match the door's texture size. I named my file =John_Romero.png=, and
I placed it inside a subfolder inside the =textures= folder called
=custom=. Then, open a text file in the project root location called
=TEXTURES.lmp=. Put the following lines into it (replace the path and
file name to match your new image):

#+BEGIN_SRC
Texture BIGDOOR1, 128, 96
{
   Patch "textures/custom/John_Romero.png", 0, 0
}
#+END_SRC

Now re-compress the zip archive with these two new files and the new subfolder.

#+BEGIN_SRC
  zip -r my_first_mod.zip textures/ TEXTURES.lmp
#+END_SRC

The archive's internal structure should look something like this:

[[./images/filestructure01.jpg]]

Now, running the PWAD with the =freedoom2.wad= IWAD (through a
launcher like DoomRunner) should bring up this view:

#+ATTR_HTML: :width 800px
[[./images/screenshot06.jpg]]

What the =TEXTURES.lmp= file (or the =TEXTURES= lump) did was create a
new, virtual texture container with the name =BIGDOOR1= with the image
=John_Romer.png= patched in, and presented that to the engine. You can
create new virtual textures this way by combining and mashing multiple
other textures together (yes, even other virtual ones). You can scale,
rotate, skew, mirror/flip, and mask, as well as do other kinds of
transformations without actually creating new image files to be stored
in the PWAD. The =TEXTURES= lump is a great way to put a decorative
poster or graffiti onto an existing wall texture. An example we will
go through later will involve slapping an interactable switch onto a
wall texture for use in a custom map.

These lump names, you will notice, have both been eight characters
long (=AQRUST08=, =BIGDOOR1=). This is another hold-over from the DOS
days, where file names would be truncated to height characters. The
case doesn't matter, but you have to stick to this convention while
naming lumps. Later on when we get into map making, you will find that
certain map formats allow for use of full texture filenames with full
paths instead of these short lump names. It is still recommended that
you use these lump names instead. Because this makes your maps easily
moddable (by you as well as others!) if the lump names are
standardized.

** Basics of SLADE

Next, we will introduce another helpful program to our modding
toolbelt. This one is a WAD-editor called SLADE. You can acquire it
for your preferred OS from [[https://github.com/sirjuddington/SLADE/releases][here]] or [[https://slade.mancubus.net/index.php?page=downloads][here]]. SLADE is in principle capable
of many things. You can write code, compile code, paint textures,
create and modify brightmaps, and even [[https://eev.ee/blog/2015/12/19/you-should-make-a-doom-level-part-1/][make/edit levels]]. There are
Doom mod authors who develop entirely on SLADE (some of them
livestream the process). But in this guide, as a rule, we will only be
using SLADE to take a peek into WADs, and possibly extract content. We
will not be using SLADE to modify any data within wads. Feel free to
learn its intricacies on your own, later.

To not overwhelm ourselves, let us first use SLADE to open the
simplest mod we have: "=my_first_mod.zip=" (or =.pk3=). Here is the
view you should be presented with:

#+ATTR_HTML: :width 800px
[[./images/SLADE01.jpg]]

It's all fairly intuitive. There is a panel that shows the files or
"lumps" in your "WAD" (I've expanded the folders and subfolders), and
a bigger panel to the right that shows the content of the currently
selected lump. In the image, I have selected the =TEXTURES.lmp=
file/lump to show its textual content. A few things of note here is
the SLADE as correctly identified the file-types of our lumps as two
=PNG= Graphic files and a "Texture Definition" lump. It says so next
to the file as well as in the bottom bar of the window. Furthermore,
it has auto-selected the "ZDoom Textures" option in the "Text
Language" pulldown menu above the textual-content panel for syntax
highlighting. All of these areas of the SLADE window are important to
us. You can select the =AQRUST08.png= file and watch the image
displayed in the content panel, along with graphic in the bottom bar.

Now let's open a bigger "WAD" file: =freedoom2.wad=. Be sure to create
a backup of this file before opening it in SLADE, just to avoid
accidentally causing a change in it. That would violate our rule
regarding SLADE for this guide.

Since this is a wad-format file, you should be confronted with a
lengthy, flat list of lumps with no hierarchical subfolder
structure. The lumps are by default, ordered in the way they are
stored in the wad (the ordering is important in the wad format). But
you can click on the "Name" tab at the top of the lumps panel to
display the lumps in ascending order of their name strings. If you
scroll down to Freedoom 2's version of the =AQRUST08= graphic (the one
your mod replaced), you will see that the "Type" field says "Graphic
(Doom)" instead of "Graphic (PNG)". The image is stored in a Paletted
raw format. If the image appears in black-and-white in the contents
panel, you can instruct SLADE to use Doom's color palette in the
drop-down menu to the top-right. The same goes for exporting
graphics. You can't just right-click on the =AQRUST08= lump and click
export, as it will result in a binary lump file. You would have to
navigate to the sub-popup menu under "Graphic" after you right-click,
and select the "Export as PNG" option. If you'd like to practice
further, try exporting the =SLIME14= graphic as a =PNG= file and
modify it, then include it in =my_first_mod.zip=. This should apply to
the floor in the opening area of Freedoom 2.

Another curiosity that should be of interest is that there is no lump
named =BIGDOOR1= (at least as of Freedoom 2 version 0.13.0). There is
one called =DOOR2_1= that looks suspiciously like the door from the
opening level, but it is too small (96 $\times$ 96 pixels, see the bottom
bar). You can test that it isn't the right one by attempting a
=DOOR2_1= lump replacement file in your mod. If will replace all
instances of =DOOR2_1= usage in the levels of Freedoom 2, but all
=BIGDOOR1= instances (including the one in the opening area) will
remain unaffected.

Freedoom 2 is actually defining the =BIGDOOR1= lump inside its
=TEXTURE1= lump. You can scroll to it and highlight it with a
click. This is stored in the older wad-centric format here and not as
a text file (unlike in =my_first_mod.zip=). Which is why the "Type"
field says "TEXTUREx". But SLADE lets you edit it if you click on the
"Edit Textures" button that should have appeared in the content
panel. Clicking on it should open this lump in its own tab and present
you with a list of virtual textures defined within.

#+ATTR_HTML: :width 800px
[[./images/SLADE02.jpg]]

Scrolling this list and highlighting =BIGDOOR1= should reveal to you
(in a "Patches" panel to the right) the five patches used to make this
lump. There's four copies of the =W13_1= patch with the corresponding
offsets forming a background canvas of size 128 $\times$ 96 pixels, and one
instance of =DOOR2_1= patch slapped on top at the center. You can look
at the =W13_1= graphic lump by tabbing back to the =freedoom2.wad=
tab. If you've been following this guide in detail, you get exactly
what is going on here.

** Sprite replacement and offsets

So far, we have made basic replacements for textures. Next, let us
replace some sprites. You would think that this is more of the same,
but there is a subtletly that lets us learn a couple of new
concepts. Get back into the game Freedoom 2, and turn left in the
starting area. You should see two health-pickup items called
"[[https://zdoom.org/wiki/Classes:Stimpack][=StimPacks=]]". I have circled them in green in the following
screenshot image:

#+ATTR_HTML: :width 800px
[[./images/screenshot04.jpg]]

These are a pickup item that can restore up to 10 points of
health. They can be picked up by walking over them. But your health
(indicated in the HUD below) needs to be less than 100 points for a
successful pickup. You can lose some health points by going forward in
the corridor and deliberately getting shot at by the two enemy zombies
in the cubby-room to the left of the door. Returning to the =StimPacks=
and walking over them should restore up to 10 points. Just walking
around the =StimPacks=, you will notice that they are depicted on
screen by a single sprite/image that always faces your viewpoint
(meaning you can never see "behind" the sprite by walking around it).

The sprite used by this object (the technical term is =actor=) is a
lump called =STIMA0=. You can find it inside =freedoom2.wad= via
SLADE. You would have to right-click and use the "Graphics" sub-menu
popup and "Export as PNG" if you want it as an image. To replace the
=STIMA0= sprite with one of your own in =my_first_mid.zip=, you will
have to create one of the reserved-name folders called =sprites= and
place your image with the name =STIMA0.png= inside it, and then make
sure to zip it with the others. If you are having trouble
finding/deciding on a replacement sprite, you can try this red-colored
version. Just right-click and save the png image inside the =sprites=
folder of your mod.

#+ATTR_HTML: :width 100px
[[./images/STIMA0.png]]

#+BEGIN_SRC
  zip -r my_first_mod.zip textures/ TEXTURES.lmp sprites/
#+END_SRC

If you are using some other image, you can try and match the original
lump's size, which was 19 $\times$ 10 pixels (check this in the bottom
bar inside the contents panel in SLADE). But you don't have to match
it. So now the file structure inside of =my_first_mod.zip= should look
like this:

[[./images/filestructure02.jpg]]

If you start the game now, and turn left at the starting area, you
will be surprised to find ... nothing! But the two =StimPack= actors
are actually there. You can confirm this by losing some health (get
shot at) and running back here to "pick" them up. However, you can't
see the new sprites. In truth, they are below the floor. By default,
sprites in GZDoom are offset relative to the top-left corner of the
image file. You can add the correct offsets to =PNG= files using SLADE
(they get stored in the =PNG= format's [[https://zdoom.org/wiki/GrAb][=grAb=]] chunk) but we won't do
that. For one, it violates our rule about not using SLADE to modify
things. And secondly, it would have to be redone everytime you replace
or modify the image file using some other third-party program. It
might not seem like much for a single sprite, but once you have
hundreds ...

Let's instead use our already existing =TEXTURES.lmp= file. Add the
following lines to it (i.e. append below the existing lines), and
then re-zip the archive:

#+BEGIN_SRC
Sprite STIMA0, 19, 10
{
    Patch "sprites/STIMA0.png", 0, 0
	  Offset 10, 10
}
#+END_SRC

Note the new =Offset= field here. Change the numbers (as well as the
overall size numbers) according to your choice of image. There is also
a =Scale= field that you could use if your image is much larger than
19 $\times$ 10 pixels. The =TEXTURES= lump uses inverse scale (2 = 50%
of the original size, 0.5 = 200% of the original size, etc.). With the
offset specified in the =TEXTURES.lmp= file, now you can modify the
=PNG= file as much as you want without worrying about preserving or
resetting the offsets within that file. The sprite replacement should
work in the game now.

* Zscript class replacements

Now we will learn the very basics of a scripting language called
=Zscript=. GZDoom understands multiple scripting languages for
modding. But most of them are deprecated and are only supported for
backwards compatibility with older mods. For modern GZDoom, there are
only two scripting languages you need to learn: =ACS= and
=Zscript=. This guide won't be going into =ACS=, but know that that is
mostly only used for map specials (conditional triggers and scripted
sequences). For everything else, stick to =Zscript=. There are more
advanced, and comprehensive guides to learning =Zscript=: [[https://jekyllgrim.github.io/ZScript_Basics/][Ash's
Zscript basics]] and [[https://www.youtube.com/playlist?list=PL-36gm0W-VKl89pw9lUfF36TJ28bjrNUn][David Newton's Youtube Tutorials]]. In this guide,
we will show the use of =Zscript= to modify two things present in this
animated view from Freedoom 2, after you turn left at the big door in
the starting area:

#+ATTR_HTML: :width 800px
#+CAPTION: We will be modifying the green =HealthBonus= items, and the =Zombieman= enemy.
[[./images/animated01.gif]]

** New pickup item

First, let's replace those green, flashing bottle from the image
above. That is a =HealthBonus=. Unlike the =StimPacks= from before,
these give the player 1 point of health all the way up to a maximum of
200 points. Meaning that you can pick them up even if you have a 100
health points. Try doing this. There are two more =HealthBonus= items
to the left of the view which can be picked up without alerting the
two =Zombieman= enemies, as long as you don't fire your weapon or bump
into them (or get into their light of sight).

Create a text file named =ZSCRIPT.zsc= in your project folder (the
extension doesn't matter. =ZSCRIPT= is one of those reserved lump
names). In it, put the following text:

#+BEGIN_SRC C
  version "4.14"

  class MFM_Elixir : HealthBonus replaces HealthBonus
  {
	  Default
	  {
		  Inventory.Amount 5;
		  RenderStyle "Shaded";
		  StencilColor "Red";
	  }

	  States
	  {
	  Spawn:
		  BON1 ABCDCB 3;
		  Loop;
	  }
  }
#+END_SRC

Now re-zip the archive with the new file:

#+BEGIN_SRC
  zip -r my_first_mod.zip textures/ TEXTURES.lmp sprites/ ZSCRIPT.zsc
#+END_SRC

and launch the game with your mod (I hope you have habituated to using
a launcher by now). Go close to the big door and turn left to the same
location as before. All of the green =HealthBonus= items should now be
replaced by translucent, red bottles that are flashing at twice the
rate. And if you pick one of them up, they should give you 5 health
points instead of 1.

*** Analysis

Let us go through the contents of the =ZSCRIPT.zsc= file to see how
this is achieved. The first line reads =version "4.14"=. This is a
necessary clause at the beginning of the =ZSCRIPT= lump, and signals a
minimum version that your mod can now be run in. If you try and load
=my_first_mod.zip= in GZDoom 4.13.2 with the =ZSCRIPT.zsc= file in, it
should throw an error. This facility exists to ensure that mods that
use new, advanced =Zscript= features don't get accidentally launched
by older versions of the engine, which would result in a crash.

Looking further down, even if you have no experience with programming,
you can notice the pairs of curly brackets encapsulating content,
which has been formatted with =TAB=-indentations for clarity. There is
a master-pair of curly brackets "open" after the line that starts with
the term "=class=", and encapsulate everything else. This "everything
else" is in the "=class=" "block", or belongs to the "=class=". Within
the =class=, there are two other blocks: the =Default= block, and the
[[https://zdoom.org/wiki/Actor_states][=States=]] block. All of these are reserved keywords that the engine
assigns special meaning to.

Classes are a very common structure within programming languages, and
their complete definition is beyond the scope of this guide. But in
this limited context, a =class= is a ... well ... class of entity that
can exist in the game's simulation. A =class= can be of various types:
inventory item, monster, the player's character (called a
=PlayerPawn=), a flying rocket, a falling rain drop, or even an
invisible "thinker". Every entity within the game is an instantiation
of some =class=. The engine "ticks" about 35 times every second, and
during each "tick" it runs through the list of entities on the map and
runs some standard "=Tick()=" functions belonging to their =class=
definitions. There is a little more to that, but this is basically how
the game runs. Physics collisions, actors interacting with each other
and the map, etc., all happen in "ticks", and there's 35 of them in
about a second.

If the last paragraph was hard to understand, that is okay. The most
important thing about classes is that you can inherit properties from
a parent =class= and then modify them. For the purposes of modding,
the syntax for declaring a =class= object is:

#+BEGIN_SRC C
  class <NEW-CLASS-NAME> : <PARENT-CLASS-NAME> [ replaces <SOME-OTHER-CLASS-NAME> ]
#+END_SRC

The part between the square brackets =[= & =]= is optional. A new
=class= doesn't have to replace an existing =class=. The new
definition can exist and operate independently. To use our own
example, the line reads:

#+BEGIN_SRC C
  class MFM_Elixir : HealthBonus replaces HealthBonus
#+END_SRC

Here we have defined a new =class= with the name =MFM_Elixir=. The
prefix =MFM_= stands for "My first Mod" (the name of your mod). It is
good practice to add a unique prefix to all new =class=
definitions. That way, there will be no conflict when your mod is
loaded along with another mod that has its own elixir =class=, since
that is a common word. Anyway, this new =class= is of the type
=HealthBonus= which plays the role of the parent =class= that all
properties can be inherited from. This =HealthBonus= =class= is an
existing =class= that is defined inside the engine itself. You can
take a look at its definition in GZDoom's source code [[https://github.com/ZDoom/gzdoom/blob/master/wadsrc/static/zscript/actors/doom/doomhealth.zs][here]]. The class
=HealthBonus= has the class =Health= as its parent class (further down
in the same file, you can see the definition for the =StimPack= class,
which also has =Health= as a parent class). You can find the same
class definition inside the =gzdoom.pk3= file that came with the
engine download. Find it using SLADE
(=zscript->actors->doom->doomhealth.zs=), but remember the rule: do
not modify the file. GZDoom automatically loads =gzdoom.pk3= when you
run it (which is why it should always be present the same folder as
the executable).

Looking at the first few lines of [[https://github.com/ZDoom/gzdoom/blob/master/wadsrc/static/zscript/actors/doom/doomhealth.zs][=class HealthBonus=]], you can see its
=Default= and =States= blocks. We inherit these properties, and change
some values within the =Default= block of our =MFM_Elixir= class
definition. Namely, we changed something called =Inventory.Amount=
from =1= to =5= (to make it give you 5 health points on pickup), and
changed some other internal rendering properties like [[https://zdoom.org/wiki/Actor_properties#RenderStyle][=RenderStyle=]]
and [[https://zdoom.org/wiki/Actor_properties#StencilColor][=StencilColor=]] which affects how its sprites are rendered. And
lastly, the [[https://zdoom.org/wiki/Actor_states][=States=]] block is meant to contain the actor's state
labels, which contain a state sequence. And each state in the sequence
is specified by the sprite to display, the time (in "ticks") to remain
in this state for, and any other functions that need to be run. In our
example, =MFM_Elixir= class's =States= block has a single state label
(=Spawn=) just like its parent =HealthBonus= class. This marks the
state sequence that all actors first enter when they are spawned on
the map. The sequence line reads:

#+BEGIN_SRC C
  BON1 ABCDCB 3;
#+END_SRC

This tells the engine to display the sprites =BON1A0=, =BON1B0=,
=BON1C0=, =BON1D0=, =BON1C0=, and =BON1B0= again in that order, each
for =3= ticks. The =Loop;= statement in the next line causes this
sequence to repeat indefinitely. You can find these sprites inside
=freedoom2.wad= using SLADE. The original [[https://github.com/ZDoom/gzdoom/blob/master/wadsrc/static/zscript/actors/doom/doomhealth.zs][=HealthBonus=]] class
displayed each of these sprites for =6= ticks, which is why it was
flashing at half the speed of =MFM_Elixir=.

Lastly, the =replace HealthBonus= clause instructed the engine to
replace all instances of the =HealthBonus= item on any loaded map with
=MFM_Elixir=. The replaced class doesn't have to be the same as the
parent class. You could, if you wanted, replace all instances of the
=Zombieman= class with =MFM_Elixir=. You can test the replacement
effect by using [[https://zdoom.org/wiki/CCMDs][console commands]]. Open the console while playing
Freedoom 2 (by hitting the tilde "~" key below the =Escape=-key on
your keyboard). This should pause the game and give you a command
prompt. In it, type "=summon MFM_Elixir=" (without quotes) and hit
=ENTER=. Now close the console by hitting the "=~=" key
again. Provided that there is enough space in front of your player
character, an instance of =MFM_Elixir= will have been spawned in front
of you and will have fallen to the ground. If you repeat the exercise
and try to =summon HealthBonus= instead, the replacement clause will
cause another instance of =MFM_Elixir= to fall at your feet.

Let us remove the replacement clause by either deleting the words
=replace HealthBonus= or by commenting them out by prefixing a
double-slash like so:

#+BEGIN_SRC C
  class MFM_Elixir : HealthBonus // replaces HealthBonus
#+END_SRC

All text in a line that follows a double-slash "=//=" is treated as
non-existent by the engine. So this is a great way to leave comments
or notes-to-self all over your Zscript code to help yourself (and
others) understand the code better. After doing this, you should be
able to =summon HealthBonus= and =summon MFM_Elixir= via the console
and watch both items flashing next to each other like so:

[[./images/potions.gif]]

Let us leave the mod in a state where =MFM_Elixir= is *NOT* replacing
=HealthBonus= for now, as we will be using this to learn something new
in the "Basics of Mapping" section later.

*** Homework assignment

The sprites that we have explored so far: =STIMA0=, and the
=BON1[ABCD]0=, all share a common feature. They all end in a "0". The
sprite names start with a 4-character string, followed by a
single-character frame ID, and then a number. The two items that these
sprites depict: =StimPack= and =HealthBonus=, both look the same from
all directions. But we have seen sprited objects/actors in this game
that look different from different angles (like the =Zombieman=). Let
us try and understand how this is done. let us replace the
=MFM_Elixir= sprite sequence with another set of sprites from
=freedoom2.wad= that also have the =[ABCD]= frames, but do not end
with a "0" character. Replace the state-sequence line with:

#+BEGIN_SRC C
  HEAD ABCDCB 3;
#+END_SRC

Get back into the game and =summon MFM_Elixir= in a bright region. Now
walk around it and see how the sprite changes based on the angle. To
make it clearer to see, comment out the =RenderStyle= line in the
=Default= block and use a single sprite frame to keep it from
changing:

#+BEGIN_SRC C
  HEAD A 1;
#+END_SRC

Now actually read the =Angles= and =Mirroring= sections from the
[[https://zdoom.org/wiki/Sprite#Angles][=Sprites= wiki page]]. Look up the names of all the sprite lumps that
start with the characters =HEADA= (there should be five of them). See
if the names make sense in terms of in-game viewing angle. Do not
proceed further until you have understood how sprite-naming convention
can affect sprite rotations. You can get pretty close to smooth
rotations if you use all 16-rotation characters, but at that point,
especially if you have a lot of animations, you are better of learning
to use 3D models.

#+HTML: <iframe width="560" height="315" src="https://www.youtube.com/embed/-HTrzHkGZ-c?si=HfIz9i_nbo-uvsGP" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Before proceeding, I want to confirm that you are not modifying the
internal contents of =my_first_mod.zip= archive file using SLADE, but are
directly modifying the files outside in your project folder and
re-compressing the zip archive. The importance of this habit will become
clear later.

** Modifying Zombieman

Coming soon ...

#+ATTR_HTML: :width 800px
[[./images/screenshot05.jpg]]

* Basics of mapping

** Getting UDB

*** Your first room
*** Using custom textures from your mod
*** Placing custom things from your mod

** The Mapfile lump

Coming soon ...

*** Changing name for freedoom1
*** MAPINFO lump
*** Packing the map with your mod

* Misc.

** Git and version control

Coming soon ...

** Seeking help and forum/discord etiquette

Coming soon ...

** Studying famous mods

Coming soon ...
